{"version":3,"file":"static/js/866.6ca58ff6.chunk.js","mappings":"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","sources":["demos/angolo-rotazione/AngleRotationDemo.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from \"react\";\n\n// Demo interattiva: angolo come rotazione\nexport default function AngleRotationDemo() {\n    const [angleDeg, setAngleDeg] = useState(35);\n    const [isAnimating, setIsAnimating] = useState(false);\n    const [speed, setSpeed] = useState(30); // deg/s\n    const [direction, setDirection] = useState(1); // 1 = CCW, -1 = CW\n    const [showProjections, setShowProjections] = useState(true);\n    const svgRef = useRef<SVGSVGElement | null>(null);\n\n    const size = 420;\n    const cx = size / 2;\n    const cy = size / 2;\n    const R = 160;\n\n    const angleRad = useMemo(() => (angleDeg * Math.PI) / 180, [angleDeg]);\n\n    useEffect(() => {\n        if (!isAnimating) return;\n        let raf: number;\n        let last = performance.now();\n        const tick = (t: number) => {\n            const dt = (t - last) / 1000;\n            last = t;\n            setAngleDeg((a) => {\n                let next = a + direction * speed * dt;\n                if (next > 720) next -= 720;\n                if (next < -720) next += 720;\n                return next;\n            });\n            raf = requestAnimationFrame(tick);\n        };\n        raf = requestAnimationFrame(tick);\n        return () => cancelAnimationFrame(raf);\n    }, [isAnimating, speed, direction]);\n\n    function onPointerDown(e: React.PointerEvent<SVGSVGElement>) {\n        const svg = svgRef.current;\n        if (!svg) return;\n        svg.setPointerCapture(e.pointerId);\n        const handleMove = (ev: PointerEvent) => {\n            const pt = svg.createSVGPoint();\n            pt.x = ev.clientX;\n            pt.y = ev.clientY;\n            const ctm = svg.getScreenCTM();\n            if (!ctm) return;\n            const p = pt.matrixTransform(ctm.inverse());\n            const dx = p.x - cx;\n            const dy = p.y - cy;\n            const ang = Math.atan2(dy, dx);\n            setAngleDeg((ang * 180) / Math.PI);\n        };\n        const handleUp = () => {\n            svg.releasePointerCapture(e.pointerId);\n            window.removeEventListener(\"pointermove\", handleMove);\n            window.removeEventListener(\"pointerup\", handleUp);\n        };\n        window.addEventListener(\"pointermove\", handleMove);\n        window.addEventListener(\"pointerup\", handleUp);\n    }\n\n    function polarToXY(r: number, angRad: number) {\n        return { x: cx + r * Math.cos(angRad), y: cy + r * Math.sin(angRad) };\n    }\n\n    const P = polarToXY(R, angleRad);\n    const Px = { x: P.x, y: cy };\n    const Py = { x: cx, y: P.y };\n\n    function arcPath() {\n        const a = angleDeg;\n        if (Math.abs(a) < 0.0001) return \"\";\n        const largeArc = Math.abs(a) > 180 ? 1 : 0;\n        const sweep = a >= 0 ? 1 : 0;\n        const start = polarToXY(60, 0);\n        const end = polarToXY(60, angleRad);\n        return `M ${start.x} ${start.y} A 60 60 0 ${largeArc} ${sweep} ${end.x} ${end.y}`;\n    }\n\n    return (\n        <div style={{ maxWidth: \"900px\", margin: \"auto\", padding: \"1rem\" }}>\n            <h1 style={{ fontSize: \"1.5rem\", fontWeight: \"bold\", marginBottom: \"0.5rem\" }}>\n                Angolo come rotazione\n            </h1>\n            <p style={{ fontSize: \"0.9rem\", color: \"#4b5563\", marginBottom: \"1rem\" }}>\n                Trascina il punto blu sulla circonferenza, usa lo slider o avvia l'animazione.\n                L'angolo Ã¨ la rotazione dal lato iniziale (asse x positivo) al lato finale.\n            </p>\n\n            <div style={{ display: \"grid\", gap: \"1.5rem\", gridTemplateColumns: \"1fr 1fr\" }}>\n                <div style={{ background: \"white\", borderRadius: 16, padding: 8, boxShadow: \"0 1px 4px rgba(0,0,0,0.1)\" }}>\n                    <svg\n                        ref={svgRef}\n                        viewBox={`0 0 ${size} ${size}`}\n                        style={{ width: \"100%\", height: \"auto\", cursor: \"crosshair\" }}\n                        onPointerDown={onPointerDown}\n                    >\n                        <rect x={0} y={0} width={size} height={size} fill=\"white\" />\n                        <circle cx={cx} cy={cy} r={R} fill=\"none\" stroke=\"#e5e7eb\" strokeWidth={2} />\n                        <line x1={cx - R - 12} y1={cy} x2={cx + R + 12} y2={cy} stroke=\"#d1d5db\" strokeDasharray=\"6 6\" />\n                        <line x1={cx} y1={cy - R - 12} x2={cx} y2={cy + R + 12} stroke=\"#d1d5db\" strokeDasharray=\"6 6\" />\n                        <line x1={cx} y1={cy} x2={cx + R} y2={cy} stroke=\"#9ca3af\" strokeWidth={3} />\n                        <path d={arcPath()} fill=\"none\" stroke=\"#3b82f6\" strokeWidth={5} />\n                        <line x1={cx} y1={cy} x2={P.x} y2={P.y} stroke=\"#111827\" strokeWidth={4} />\n                        {showProjections && (\n                            <g>\n                                <line x1={P.x} y1={P.y} x2={Px.x} y2={Px.y} stroke=\"#a8a29e\" strokeDasharray=\"4 4\" />\n                                <line x1={P.x} y1={P.y} x2={Py.x} y2={Py.y} stroke=\"#a8a29e\" strokeDasharray=\"4 4\" />\n                                <circle cx={Px.x} cy={Px.y} r={4} fill=\"#a8a29e\" />\n                                <circle cx={Py.x} cy={Py.y} r={4} fill=\"#a8a29e\" />\n                            </g>\n                        )}\n                        <circle cx={cx} cy={cy} r={5} fill=\"#111827\" />\n                        <circle cx={P.x} cy={P.y} r={9} fill=\"#3b82f6\" />\n                        <text x={cx + R + 10} y={cy - 8} fontSize={12} fill=\"#6b7280\">\n                            lato iniziale\n                        </text>\n                    </svg>\n                </div>\n\n                <div style={{ background: \"white\", borderRadius: 16, padding: 16, boxShadow: \"0 1px 4px rgba(0,0,0,0.1)\" }}>\n                    <div>\n                        <label>Angolo (Â°)</label>\n                        <input\n                            type=\"range\"\n                            min={-360}\n                            max={360}\n                            step={1}\n                            value={angleDeg}\n                            onChange={(e) => setAngleDeg(parseFloat(e.target.value))}\n                            style={{ width: \"100%\" }}\n                        />\n                        <div style={{ fontSize: \"2rem\", fontWeight: \"bold\" }}>\n                            {angleDeg.toFixed(1)}Â°\n                            <span style={{ marginLeft: 12, fontSize: 16, color: \"#6b7280\" }}>\n                ({angleRad.toFixed(3)} rad)\n              </span>\n                        </div>\n                    </div>\n\n                    <div style={{ marginTop: 16, display: \"flex\", gap: 8 }}>\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: \"black\", color: \"white\", border: 0 }}\n                            onClick={() => setIsAnimating((v) => !v)}\n                        >\n                            {isAnimating ? \"Pausa\" : \"Avvia animazione\"}\n                        </button>\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: \"#f3f4f6\", border: 0 }}\n                            onClick={() => setAngleDeg(0)}\n                        >\n                            Reset\n                        </button>\n                    </div>\n\n                    <div style={{ marginTop: 16 }}>\n                        <label style={{ display: \"block\" }}>\n                            <input\n                                type=\"checkbox\"\n                                checked={direction === -1}\n                                onChange={(e) => setDirection(e.target.checked ? -1 : 1)}\n                            />\n                            Senso orario (angoli negativi)\n                        </label>\n                        <label style={{ display: \"block\" }}>\n                            <input\n                                type=\"checkbox\"\n                                checked={showProjections}\n                                onChange={(e) => setShowProjections(e.target.checked)}\n                            />\n                            Mostra proiezioni (cosÎ¸, sinÎ¸)\n                        </label>\n                    </div>\n\n                    <p style={{ fontSize: \"0.9rem\", marginTop: 16 }}>\n                        L'angolo Ã¨ la rotazione dal lato iniziale (asse x positivo) al lato finale.\n                        Con proiezioni attive, la coordinata x = cos Î¸ e la y = sin Î¸.\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":["AngleRotationDemo","angleDeg","setAngleDeg","useState","isAnimating","setIsAnimating","speed","setSpeed","direction","setDirection","showProjections","setShowProjections","svgRef","useRef","size","cx","cy","R","angleRad","useMemo","Math","PI","polarToXY","r","angRad","x","cos","y","sin","useEffect","raf","last","performance","now","tick","t","dt","a","next","requestAnimationFrame","cancelAnimationFrame","P","Px","Py","_jsxs","style","maxWidth","margin","padding","children","_jsx","fontSize","fontWeight","marginBottom","color","display","gap","gridTemplateColumns","background","borderRadius","boxShadow","ref","viewBox","concat","width","height","cursor","onPointerDown","e","svg","current","setPointerCapture","pointerId","handleMove","ev","pt","createSVGPoint","clientX","clientY","ctm","getScreenCTM","p","matrixTransform","inverse","dx","dy","ang","atan2","handleUp","releasePointerCapture","window","removeEventListener","addEventListener","fill","stroke","strokeWidth","x1","y1","x2","y2","strokeDasharray","d","abs","largeArc","sweep","start","end","arcPath","type","min","max","step","value","onChange","parseFloat","target","toFixed","marginLeft","marginTop","border","onClick","v","checked"],"sourceRoot":""}