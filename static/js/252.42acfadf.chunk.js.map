{"version":3,"file":"static/js/252.42acfadf.chunk.js","mappings":"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","sources":["demos/intervalli-r/IntervalliRDemo.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from \"react\";\n\n/**\n * Intervalli su R — demo interattiva con pallina e inf/sup/min/max.\n * FIX TS2345: tutti i controlli tipo `includes(kind)` usano array tipizzati `readonly SetKind[]`.\n */\n\n// ===== Tipi & costanti =====\nexport const SetKinds = {\n    CLOSED: \"[a,b]\",\n    OPEN: \"(a,b)\",\n    LEFT_OPEN: \"(a,b]\",\n    RIGHT_OPEN: \"[a,b)\",\n    RAY_RIGHT_CLOSED: \"[a, +∞)\",\n    RAY_RIGHT_OPEN: \"(a, +∞)\",\n    RAY_LEFT_CLOSED: \"(-∞, b]\",\n    RAY_LEFT_OPEN: \"(-∞, b)\",\n    WHOLE: \"(-∞, +∞)\",\n} as const;\n\nexport type SetKind = typeof SetKinds[keyof typeof SetKinds];\n\n// Gruppi tipizzati (evitano TS2345 sugli includes)\nconst FINITE_INTERVALS: readonly SetKind[] = [\n    SetKinds.CLOSED,\n    SetKinds.OPEN,\n    SetKinds.LEFT_OPEN,\n    SetKinds.RIGHT_OPEN,\n];\nconst RAY_RIGHT: readonly SetKind[] = [\n    SetKinds.RAY_RIGHT_CLOSED,\n    SetKinds.RAY_RIGHT_OPEN,\n];\nconst RAY_LEFT: readonly SetKind[] = [\n    SetKinds.RAY_LEFT_CLOSED,\n    SetKinds.RAY_LEFT_OPEN,\n];\nconst WITH_A: readonly SetKind[] = [...FINITE_INTERVALS, ...RAY_RIGHT];\nconst WITH_B: readonly SetKind[] = [...FINITE_INTERVALS, ...RAY_LEFT];\n\nfunction describeSet(kind: SetKind, a: number, b: number) {\n    const lowerBounded = [...FINITE_INTERVALS, ...RAY_RIGHT].includes(kind);\n    const upperBounded = [...FINITE_INTERVALS, ...RAY_LEFT].includes(kind);\n\n    const inf: number | \"-∞\" = lowerBounded ? a : \"-∞\";\n    const sup: number | \"+∞\" = upperBounded ? b : \"+∞\";\n\n    let hasMin = false;\n    let hasMax = false;\n    switch (kind) {\n        case SetKinds.CLOSED:\n            hasMin = true; hasMax = true; break;\n        case SetKinds.RIGHT_OPEN:\n            hasMin = true; hasMax = false; break;\n        case SetKinds.LEFT_OPEN:\n            hasMin = false; hasMax = true; break;\n        case SetKinds.OPEN:\n            hasMin = false; hasMax = false; break;\n        case SetKinds.RAY_RIGHT_CLOSED:\n            hasMin = true; hasMax = false; break;\n        case SetKinds.RAY_RIGHT_OPEN:\n            hasMin = false; hasMax = false; break;\n        case SetKinds.RAY_LEFT_CLOSED:\n            hasMin = false; hasMax = true; break;\n        case SetKinds.RAY_LEFT_OPEN:\n            hasMin = false; hasMax = false; break;\n        case SetKinds.WHOLE:\n            hasMin = false; hasMax = false; break;\n    }\n\n    return { lowerBounded, upperBounded, inf, sup, hasMin, hasMax };\n}\n\nfunction Marker({ x, included, label }: { x: number; included: boolean; label?: string }) {\n    return (\n        <div className=\"absolute -translate-x-1/2 -translate-y-1/2 text-center\" style={{ left: x, top: 24 }}>\n            <div className={`w-3 h-3 rounded-full border-2 ${included ? \"bg-black border-black\" : \"bg-white border-black\"}`} />\n            {label && <div className=\"text-xs mt-1 text-gray-700\">{label}</div>}\n        </div>\n    );\n}\n\nexport default function IntervalliRDemo() {\n    // Stato\n    const [kind, setKind] = useState<SetKind>(SetKinds.CLOSED);\n    const [a, setA] = useState<number>(-2);\n    const [b, setB] = useState<number>(3);\n    const [speed, setSpeed] = useState<number>(0.8); // px/ms → unità matematiche via scala\n    const [playing, setPlaying] = useState<boolean>(true);\n\n    // Geometria della linea\n    const lineRef = useRef<HTMLDivElement | null>(null);\n    const [geom, setGeom] = useState({ left: 0, right: 0, width: 0 });\n\n    useEffect(() => {\n        function updateGeom() {\n            const el = lineRef.current;\n            if (!el) return;\n            const r = el.getBoundingClientRect();\n            setGeom({ left: r.left, right: r.right, width: r.width });\n        }\n        updateGeom();\n        window.addEventListener(\"resize\", updateGeom);\n        return () => window.removeEventListener(\"resize\", updateGeom);\n    }, []);\n\n    // Vista R→px\n    const view = useMemo(() => {\n        let minX: number, maxX: number;\n        if (FINITE_INTERVALS.includes(kind)) {\n            const pad = Math.max(1, (b - a) * 0.2);\n            minX = a - pad; maxX = b + pad;\n        } else if (RAY_RIGHT.includes(kind)) {\n            const m = Math.max(1, Math.abs(a) + 2);\n            minX = a - 2 * m; maxX = a + 8 * m;\n        } else if (RAY_LEFT.includes(kind)) {\n            const m = Math.max(1, Math.abs(b) + 2);\n            minX = b - 8 * m; maxX = b + 2 * m;\n        } else {\n            minX = -10; maxX = 10; // WHOLE\n        }\n        const scale = geom.width > 0 ? (geom.width - 40) / (maxX - minX) : 1; // padding 20 px per lato\n        const toPx = (x: number) => 20 + (x - minX) * scale;\n        const fromPx = (px: number) => minX + (px - 20) / scale;\n        return { minX, maxX, toPx, fromPx, scale };\n    }, [geom.width, kind, a, b]);\n\n    const desc = useMemo(() => describeSet(kind, a, b), [kind, a, b]);\n\n    // Stato palla in coordinate matematiche\n    const [x, setX] = useState<number>(() => (a + b) / 2);\n    const [vx, setVx] = useState<number>(1); // unità matematiche/s\n    const lastT = useRef<number | null>(null);\n\n    useEffect(() => {\n        // reset posizione quando cambia l'insieme\n        const center = Number.isFinite(a) && Number.isFinite(b)\n            ? (a + b) / 2\n            : Number.isFinite(a)\n                ? a + 1\n                : Number.isFinite(b)\n                    ? b - 1\n                    : 0;\n        setX(center);\n        setVx(1);\n    }, [kind, a, b]);\n\n    useEffect(() => {\n        if (!playing) { lastT.current = null; return; }\n        let raf: number;\n        const tick = (t: number) => {\n            if (!lastT.current) lastT.current = t;\n            const dt = t - (lastT.current || t);\n            lastT.current = t;\n\n            const vu = speed / (view.scale || 1); // unità matematiche per ms\n            let nx = x + (vx >= 0 ? vu * dt : -vu * dt);\n\n            const hasLower = desc.lowerBounded;\n            const hasUpper = desc.upperBounded;\n            const lower = hasLower ? a : -Infinity;\n            const upper = hasUpper ? b : +Infinity;\n\n            if (Number.isFinite(lower) && nx <= (lower as number)) { nx = lower as number; setVx(1); }\n            else if (Number.isFinite(upper) && nx >= (upper as number)) { nx = upper as number; setVx(-1); }\n            else if (!Number.isFinite(upper) && nx > view.maxX + 2) { nx = view.minX - 1; }\n            else if (!Number.isFinite(lower) && nx < view.minX - 2) { nx = view.maxX + 1; }\n\n            setX(nx);\n            raf = requestAnimationFrame(tick);\n        };\n        raf = requestAnimationFrame(tick);\n        return () => cancelAnimationFrame(raf);\n    }, [playing, speed, view.scale, view.minX, view.maxX, x, vx, a, b, desc.lowerBounded, desc.upperBounded]);\n\n    // Helpers px\n    const px = view.toPx(x);\n    const ax = Number.isFinite(a) ? view.toPx(a) : null;\n    const bx = Number.isFinite(b) ? view.toPx(b) : null;\n\n    // Inclusione estremi\n    const INCLUDE_A: readonly SetKind[] = [SetKinds.CLOSED, SetKinds.RIGHT_OPEN, SetKinds.RAY_RIGHT_CLOSED];\n    const INCLUDE_B: readonly SetKind[] = [SetKinds.CLOSED, SetKinds.LEFT_OPEN, SetKinds.RAY_LEFT_CLOSED];\n    const A_INCLUDED = INCLUDE_A.includes(kind);\n    const B_INCLUDED = INCLUDE_B.includes(kind);\n\n    // ===== UI =====\n    const card: React.CSSProperties = { background: \"#fff\", borderRadius: 16, padding: 12, boxShadow: \"0 1px 4px rgba(0,0,0,0.1)\" };\n\n    // Self-test (dev): coerenza\n    useEffect(() => {\n        if (process.env.NODE_ENV === \"production\") return;\n        const sample: readonly SetKind[] = [\n            SetKinds.CLOSED, SetKinds.OPEN, SetKinds.LEFT_OPEN, SetKinds.RIGHT_OPEN,\n            SetKinds.RAY_RIGHT_CLOSED, SetKinds.RAY_RIGHT_OPEN,\n            SetKinds.RAY_LEFT_CLOSED, SetKinds.RAY_LEFT_OPEN,\n            SetKinds.WHOLE,\n        ];\n        // eslint-disable-next-line no-console\n        console.log(\"[TEST] describeSet:\", sample.map(k => ({ k, d: describeSet(k, -1, 2) })));\n    }, []);\n\n    return (\n        <div className=\"p-6 max-w-5xl mx-auto\">\n            <h1 className=\"text-2xl font-semibold mb-2\">Pallina su una retta — inf, sup, minimo, massimo</h1>\n            <p className=\"text-gray-700 mb-4\">Scegli l'insieme e osserva come cambiano infimo/supremo/minimo/massimo e l'inclusione degli estremi.</p>\n\n            {/* Controlli */}\n            <div className=\"grid gap-3 md:grid-cols-2 mb-4\">\n                <div style={card}>\n                    <label className=\"block text-sm font-medium mb-1\">Tipo di insieme</label>\n                    <select className=\"w-full border rounded-lg p-2\" value={kind} onChange={(e) => setKind(e.target.value as SetKind)}>\n                        {Object.values(SetKinds).map((k) => (\n                            <option key={k} value={k}>{k}</option>\n                        ))}\n                    </select>\n                    <div className=\"text-xs text-gray-500 mt-2\">Prova intervalli aperti/chiusi e semirette per vedere quando il supremo/infimo è raggiunto.</div>\n                </div>\n\n                <div style={card}>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                        <div>\n                            <label className=\"block text-sm font-medium\">a</label>\n                            <input type=\"number\" className=\"w-full border rounded-lg p-2\" value={a} step={0.5} onChange={(e) => setA(parseFloat(e.target.value))} />\n                        </div>\n                        <div>\n                            <label className=\"block text-sm font-medium\">b</label>\n                            <input type=\"number\" className=\"w-full border rounded-lg p-2\" value={b} step={0.5} onChange={(e) => setB(parseFloat(e.target.value))} />\n                        </div>\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-2\">Ignorato se non serve (per semirette e ℝ intera usa solo a o b).</div>\n                </div>\n\n                <div style={card}>\n                    <label className=\"block text-sm font-medium\">Velocità</label>\n                    <input type=\"range\" min={0.2} max={2.0} step={0.1} value={speed} onChange={(e) => setSpeed(parseFloat(e.target.value))} className=\"w-full\" />\n                    <div className=\"flex items-center gap-2 mt-2\">\n                        <button onClick={() => setPlaying(p => !p)} className=\"px-3 py-1 rounded-lg border shadow-sm\">\n                            {playing ? \"Pausa\" : \"Play\"}\n                        </button>\n                        <div className=\"text-xs text-gray-600\">{playing ? \"In esecuzione\" : \"In pausa\"}</div>\n                    </div>\n                </div>\n\n                <div style={card}>\n                    <div className=\"text-sm font-medium mb-2\">Proprietà dell'insieme</div>\n                    <ul className=\"text-sm space-y-1\">\n                        <li>Inferiormente limitato: <b>{desc.lowerBounded ? \"Sì\" : \"No\"}</b></li>\n                        <li>Superiormente limitato: <b>{desc.upperBounded ? \"Sì\" : \"No\"}</b></li>\n                        <li>Infimo: <b>{String(desc.inf)}</b> {desc.hasMin && <span className=\"text-xs text-emerald-700\">(= minimo)</span>}</li>\n                        <li>Supremo: <b>{String(desc.sup)}</b> {desc.hasMax && <span className=\"text-xs text-emerald-700\">(= massimo)</span>}</li>\n                        <li>Minimo esiste: <b>{desc.hasMin ? \"Sì\" : \"No\"}</b></li>\n                        <li>Massimo esiste: <b>{desc.hasMax ? \"Sì\" : \"No\"}</b></li>\n                    </ul>\n                </div>\n            </div>\n\n            {/* Area retta */}\n            <div className=\"relative border rounded-2xl bg-white shadow-inner h-40 overflow-hidden\" ref={lineRef}>\n                {/* linea numerica */}\n                <div className=\"absolute left-5 right-5 top-1/2 h-0.5 bg-gray-800\" />\n\n                {/* Frecce di infinito */}\n                {!desc.lowerBounded && (\n                    <div className=\"absolute left-2 top-1/2 -translate-y-1/2\">\n                        <div className=\"w-0 h-0 border-t-4 border-b-4 border-r-8 border-t-transparent border-b-transparent border-r-gray-800\" />\n                    </div>\n                )}\n                {!desc.upperBounded && (\n                    <div className=\"absolute right-2 top-1/2 -translate-y-1/2 rotate-180\">\n                        <div className=\"w-0 h-0 border-t-4 border-b-4 border-r-8 border-t-transparent border-b-transparent border-r-gray-800\" />\n                    </div>\n                )}\n\n                {/* Marcatori estremi */}\n                {Number.isFinite(a) && WITH_A.includes(kind) && ax !== null && (\n                    <Marker x={ax} included={A_INCLUDED} label=\"a\" />\n                )}\n                {Number.isFinite(b) && WITH_B.includes(kind) && bx !== null && (\n                    <Marker x={bx} included={B_INCLUDED} label=\"b\" />\n                )}\n\n                {/* Barra intervallo evidenziata */}\n                {(() => {\n                    const y = 20; // offset verticale\n                    const thickness = 6;\n                    let L = Number.isFinite(a) && ax !== null ? ax : 20;\n                    let R = Number.isFinite(b) && bx !== null ? bx : (geom.width - 20);\n                    if (RAY_RIGHT.includes(kind) && ax !== null) { L = ax; R = geom.width - 20; }\n                    if (RAY_LEFT.includes(kind) && bx !== null)  { L = 20; R = bx; }\n                    if (kind === SetKinds.WHOLE) { L = 20; R = geom.width - 20; }\n                    return (\n                        <div className=\"absolute left-0 right-0\" style={{ top: `calc(50% - ${y}px)` }}>\n                            <div className=\"absolute\" style={{ left: Math.min(L, R), width: Math.abs(R - L), height: thickness, background: \"rgba(59,130,246,0.25)\", top: -thickness/2 }} />\n                        </div>\n                    );\n                })()}\n\n                {/* Pallina */}\n                <div\n                    className=\"absolute w-5 h-5 rounded-full bg-rose-600 shadow-md -translate-x-1/2 -translate-y-1/2\"\n                    style={{ left: px, top: \"50%\" }}\n                    title=\"pallina\"\n                />\n\n                {/* Label min/max se esistono */}\n                {desc.hasMin && Number.isFinite(a) && ax !== null && (\n                    <div className=\"absolute text-xs text-emerald-700 -translate-x-1/2\" style={{ left: ax, top: 64 }}>min = a</div>\n                )}\n                {desc.hasMax && Number.isFinite(b) && bx !== null && (\n                    <div className=\"absolute text-xs text-emerald-700 -translate-x-1/2\" style={{ left: bx, top: 64 }}>max = b</div>\n                )}\n            </div>\n\n            {/* Legenda */}\n            <div className=\"mt-3 text-sm text-gray-700\">\n                <p className=\"mb-1\"><b>Legenda:</b> punto pieno = estremo incluso; punto vuoto = estremo escluso. Frecce ai bordi indicano illimitatezza.</p>\n                <p>Il supremo/infimo esistono sempre per intervalli finiti; il <i>massimo</i>/<i>minimo</i> esistono solo quando il supremo/infimo sono raggiunti (estremo incluso).</p>\n            </div>\n\n            <div className=\"mt-4 text-xs text-gray-500\">\n                Nota: per (a,b) la pallina rimbalza nella zona evidenziata ma non può toccare a o b (marcatori vuoti): quindi non esiste minimo/massimo anche se inf = a e sup = b.\n            </div>\n        </div>\n    );\n}\n"],"names":["SetKinds","CLOSED","OPEN","LEFT_OPEN","RIGHT_OPEN","RAY_RIGHT_CLOSED","RAY_RIGHT_OPEN","RAY_LEFT_CLOSED","RAY_LEFT_OPEN","WHOLE","FINITE_INTERVALS","RAY_RIGHT","RAY_LEFT","WITH_A","WITH_B","Marker","_ref","x","included","label","_jsxs","className","style","left","top","children","_jsx","concat","IntervalliRDemo","kind","setKind","useState","a","setA","b","setB","speed","setSpeed","playing","setPlaying","lineRef","useRef","geom","setGeom","right","width","useEffect","updateGeom","el","current","r","getBoundingClientRect","window","addEventListener","removeEventListener","view","useMemo","minX","maxX","includes","pad","Math","max","m","abs","scale","toPx","fromPx","px","desc","lowerBounded","upperBounded","inf","sup","hasMin","hasMax","describeSet","setX","vx","setVx","lastT","center","Number","isFinite","raf","tick","t","dt","vu","nx","hasLower","hasUpper","lower","Infinity","upper","requestAnimationFrame","cancelAnimationFrame","ax","bx","INCLUDE_A","INCLUDE_B","A_INCLUDED","B_INCLUDED","card","background","borderRadius","padding","boxShadow","value","onChange","e","target","Object","values","map","k","type","step","parseFloat","min","onClick","p","String","ref","L","R","height","title"],"sourceRoot":""}