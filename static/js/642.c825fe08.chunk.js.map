{"version":3,"file":"static/js/642.c825fe08.chunk.js","mappings":"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","sources":["demos/legge-coulomb/LeggeCoulombDemo.tsx"],"sourcesContent":["import React, { useMemo, useRef, useState } from \"react\";\n\n/**\n * Legge di Coulomb — due cariche puntiformi su un piano\n * - Trascina le cariche (q1, q2) con **mouse o touch**\n * - Cambia i valori delle cariche e l'unità (nC, µC, mC, C)\n * - Vedi vettori forza F1 su q1 dovuta a q2 e F2 su q2 dovuta a q1\n * - Mostra modulo |F|, direzione e verso (attrazione/repulsione)\n *\n * I vettori sono scalati in px con un fattore regolabile e con un tasto \"Auto‑scala\".\n */\n\n// Costante di Coulomb (vuoto)\nconst K = 8.9875517923e9; // N·m^2/C^2\n\n// Dimensioni canvas SVG\nconst WIDTH = 920;\nconst HEIGHT = 520;\nconst PAD = 40; // padding interno per non uscire con i marker\n\n// Unità di carica disponibili\nconst CHARGE_UNITS = [\"nC\", \"µC\", \"mC\", \"C\"] as const;\ntype ChargeUnit = typeof CHARGE_UNITS[number];\nconst UNIT_TO_COULOMB: Record<ChargeUnit, number> = {\n    nC: 1e-9,\n    \"µC\": 1e-6,\n    mC: 1e-3,\n    C: 1,\n};\n\n// Utility numeriche\nconst clamp = (x: number, a: number, b: number) => Math.max(a, Math.min(b, x));\nconst hypot = (dx: number, dy: number) => Math.hypot(dx, dy);\nconst toDeg = (rad: number) => (rad * 180) / Math.PI;\n\n// Disegno frecce\nfunction Arrow({ x1, y1, x2, y2, color = \"#10b981\", label }: {\n    x1: number; y1: number; x2: number; y2: number; color?: string; label?: string;\n}) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const L = Math.hypot(dx, dy) || 1;\n    const ux = dx / L, uy = dy / L;\n    const head = 12; // px\n    const backX = x2 - ux * head;\n    const backY = y2 - uy * head;\n    const leftX = backX + (-uy) * 7;\n    const leftY = backY + (ux) * 7;\n    const rightX = backX - (-uy) * 7;\n    const rightY = backY - (ux) * 7;\n    return (\n        <g>\n            <line x1={x1} y1={y1} x2={x2} y2={y2} stroke={color} strokeWidth={4} />\n            <polygon points={`${x2},${y2} ${leftX},${leftY} ${rightX},${rightY}`} fill={color} />\n            {label && (\n                <text x={(x1 + x2) / 2} y={(y1 + y2) / 2 - 8} fontSize={12} textAnchor=\"middle\" fill={color}>{label}</text>\n            )}\n        </g>\n    );\n}\n\nexport default function LeggeCoulombDemo() {\n    // Stato cariche: posizione in px e valore in unità selezionata\n    const [unit, setUnit] = useState<ChargeUnit>(\"µC\");\n    const [pxPerMeter, setPxPerMeter] = useState<number>(60); // scala: 60 px ≈ 1 m\n    const [gain, setGain] = useState<number>(500); // px per Newton (fattore di visualizzazione vettori)\n    const [showForces, setShowForces] = useState<boolean>(true);\n\n    const [q1, setQ1] = useState<number>(+3); // in unità correnti (es. µC)\n    const [q2, setQ2] = useState<number>(-4);\n    const [p1, setP1] = useState<{ x: number; y: number }>({ x: WIDTH * 0.33, y: HEIGHT * 0.52 });\n    const [p2, setP2] = useState<{ x: number; y: number }>({ x: WIDTH * 0.67, y: HEIGHT * 0.38 });\n\n    // Drag con Pointer Events (mouse e touch)\n    const svgRef = useRef<SVGSVGElement | null>(null);\n    const [drag, setDrag] = useState<null | { which: \"q1\" | \"q2\"; id: number }>(null);\n\n    // Conversioni cariche e distanza\n    const q1C = useMemo(() => q1 * UNIT_TO_COULOMB[unit], [q1, unit]);\n    const q2C = useMemo(() => q2 * UNIT_TO_COULOMB[unit], [q2, unit]);\n\n    // Vettori geometrici\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const r_px = Math.max(1, hypot(dx, dy));\n    const r_m = r_px / pxPerMeter; // metri\n    const ux = dx / r_px;\n    const uy = dy / r_px; // versore da q1 verso q2\n\n    const coincidenti = r_px < 8;\n\n    // Coulomb: F1 su q1 dovuta a q2\n    const prod = q1C * q2C;\n    const Fmag = coincidenti ? 0 : (K * Math.abs(prod)) / (r_m * r_m); // Newton\n    const sign = prod > 0 ? -1 : +1; // verso rispetto a u12\n    const F1x = sign * ux * Fmag;\n    const F1y = sign * uy * Fmag;\n    const F2x = -F1x;\n    const F2y = -F1y;\n\n    // Vettori in pixel per il disegno (con lunghezza minima per visibilità)\n    const vpx = (F: number) => {\n        const L = Math.abs(F) * gain;\n        const sgn = F >= 0 ? 1 : -1;\n        const Lc = Math.min(Math.max(L, 6), 2000); // tra 6px e 2000px\n        return sgn * Lc;\n    };\n    const F1x_px = vpx(F1x), F1y_px = vpx(F1y);\n    const F2x_px = vpx(F2x), F2y_px = vpx(F2y);\n\n    const angle1 = toDeg(Math.atan2(F1y, F1x));\n    const verso = prod < 0 ? \"attrazione (verso l'altra carica)\" : \"repulsione (lontano dall'altra carica)\";\n\n    // --- Pointer helpers ---\n    function ptrToLocal(e: React.PointerEvent<Element>) {\n        const rect = (svgRef.current as SVGSVGElement).getBoundingClientRect();\n        return { x: e.clientX - rect.left, y: e.clientY - rect.top };\n    }\n    function startDrag(which: \"q1\" | \"q2\", e: React.PointerEvent<Element>) {\n        (e.currentTarget as Element).setPointerCapture?.(e.pointerId);\n        setDrag({ which, id: e.pointerId });\n    }\n    function moveDrag(e: React.PointerEvent<SVGSVGElement>) {\n        if (!drag) return;\n        const m = ptrToLocal(e);\n        const nx = clamp(m.x, PAD, WIDTH - PAD);\n        const ny = clamp(m.y, PAD, HEIGHT - PAD);\n        if (drag.which === \"q1\") setP1({ x: nx, y: ny });\n        else setP2({ x: nx, y: ny });\n    }\n    function endDrag(e: React.PointerEvent<SVGSVGElement>) {\n        if (drag && e.pointerId === drag.id) setDrag(null);\n    }\n\n    // Randomizza posizioni evitando sovrapposizioni\n    function randomizePositions() {\n        function rnd() {\n            return {\n                x: PAD + Math.random() * (WIDTH - 2 * PAD),\n                y: PAD + Math.random() * (HEIGHT - 2 * PAD),\n            };\n        }\n        let a = rnd();\n        let b = rnd();\n        let tries = 0;\n        while (hypot(a.x - b.x, a.y - b.y) < 120 && tries < 50) { b = rnd(); tries++; }\n        setP1(a); setP2(b);\n    }\n\n    function autoScale() {\n        if (Fmag > 0) {\n            const targetPx = 140; // punta a ~140px per la freccia\n            const newGain = targetPx / Fmag;\n            setGain(clamp(newGain, 5, 5000));\n        }\n    }\n\n    const circleCursor = drag ? \"grabbing\" : \"grab\";\n    const hitR = 26; // raggio area sensibile al drag (trasparente)\n\n    return (\n        <div style={{ maxWidth: 1024, margin: \"0 auto\", padding: 16 }}>\n            <h1 style={{ fontSize: 22, fontWeight: 700, marginBottom: 8 }}>Legge di Coulomb — due cariche puntiformi</h1>\n            <p style={{ color: \"#475569\", marginTop: 0 }}>\n                <b>Trascina</b> i dischi colorati (mouse o touch) per spostare <b>q1</b> e <b>q2</b>. Cambia il loro valore e osserva i vettori forza.\n                Direzione lungo la congiungente, verso da <i>seg(q1·q2)</i>, modulo |F| = k |q1 q2| / r².\n            </p>\n\n            <div style={{ display: \"grid\", gridTemplateColumns: \"1.3fr 1fr\", gap: 12 }}>\n                {/* CANVAS */}\n                <div style={{ background: \"#fff\", borderRadius: 16, padding: 12, boxShadow: \"0 1px 4px rgba(0,0,0,0.08)\" }}>\n                    <svg\n                        ref={svgRef}\n                        viewBox={`0 0 ${WIDTH} ${HEIGHT}`}\n                        style={{ width: \"100%\", height: \"auto\" }}\n                        onPointerMove={moveDrag}\n                        onPointerUp={endDrag}\n                        onPointerCancel={endDrag}\n                        onPointerLeave={endDrag}\n                    >\n                        {/* Sfondo */}\n                        <rect x={0} y={0} width={WIDTH} height={HEIGHT} rx={16} fill=\"#ffffff\" />\n\n                        {/* Griglia leggera */}\n                        {Array.from({ length: 10 }, (_, i) => i + 1).map((i) => (\n                            <line key={`vg-${i}`} x1={(i * WIDTH) / 10} y1={PAD} x2={(i * WIDTH) / 10} y2={HEIGHT - PAD} stroke=\"#f1f5f9\" />\n                        ))}\n                        {Array.from({ length: 8 }, (_, i) => i + 1).map((i) => (\n                            <line key={`hg-${i}`} x1={PAD} y1={(i * HEIGHT) / 8} x2={WIDTH - PAD} y2={(i * HEIGHT) / 8} stroke=\"#f1f5f9\" />\n                        ))}\n\n                        {/* Segmento di distanza */}\n                        <line x1={p1.x} y1={p1.y} x2={p2.x} y2={p2.y} stroke=\"#94a3b8\" strokeDasharray=\"6 6\" />\n\n                        {/* Vettori forza */}\n                        {showForces && !coincidenti && (\n                            <>\n                                <Arrow x1={p1.x} y1={p1.y} x2={p1.x + F1x_px} y2={p1.y + F1y_px} color=\"#0ea5e9\" label=\"F1\" />\n                                <Arrow x1={p2.x} y1={p2.y} x2={p2.x + F2x_px} y2={p2.y + F2y_px} color=\"#ef4444\" label=\"F2\" />\n                            </>\n                        )}\n\n                        {/* Cariche + area sensibile al drag */}\n                        <g style={{ cursor: circleCursor }}>\n                            {/* q1 */}\n                            <circle cx={p1.x} cy={p1.y} r={hitR} fill=\"transparent\" onPointerDown={(e)=> startDrag(\"q1\", e)} />\n                            <circle cx={p1.x} cy={p1.y} r={18} fill={q1 >= 0 ? \"#0ea5e9\" : \"#0284c7\"} stroke=\"#0c4a6e\" strokeWidth={2} pointerEvents=\"none\" />\n                            <text x={p1.x} y={p1.y + 4} fontSize={13} textAnchor=\"middle\" fill=\"#ffffff\" pointerEvents=\"none\">q1</text>\n\n                            {/* q2 */}\n                            <circle cx={p2.x} cy={p2.y} r={hitR} fill=\"transparent\" onPointerDown={(e)=> startDrag(\"q2\", e)} />\n                            <circle cx={p2.x} cy={p2.y} r={18} fill={q2 >= 0 ? \"#ef4444\" : \"#dc2626\"} stroke=\"#7f1d1d\" strokeWidth={2} pointerEvents=\"none\" />\n                            <text x={p2.x} y={p2.y + 4} fontSize={13} textAnchor=\"middle\" fill=\"#ffffff\" pointerEvents=\"none\">q2</text>\n                        </g>\n\n                        {/* Etichette distanza */}\n                        <g>\n                            <circle cx={(p1.x + p2.x) / 2} cy={(p1.y + p2.y) / 2} r={3} fill=\"#94a3b8\" />\n                            <text x={(p1.x + p2.x) / 2} y={(p1.y + p2.y) / 2 - 8} fontSize={11} textAnchor=\"middle\" fill=\"#475569\">\n                                r = {r_m.toFixed(2)} m\n                            </text>\n                        </g>\n                    </svg>\n                </div>\n\n                {/* PANNELLO CONTROLLI */}\n                <div style={{ background: \"#fff\", borderRadius: 16, padding: 12, boxShadow: \"0 1px 4px rgba(0,0,0,0.08)\" }}>\n                    <div style={{ display: \"grid\", gap: 10 }}>\n                        <div style={{ fontWeight: 600, marginBottom: 4 }}>Cariche</div>\n                        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr auto\", gap: 8, alignItems: \"center\" }}>\n                            <label>Unità: </label>\n                            <select value={unit} onChange={(e) => setUnit(e.target.value as ChargeUnit)}>\n                                {CHARGE_UNITS.map(u => <option key={u} value={u}>{u}</option>)}\n                            </select>\n                        </div>\n                        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: 8 }}>\n                            <div>\n                                <label style={{ fontSize: 13 }}>q1 ({unit})</label>\n                                <input type=\"number\" step={0.1} value={q1} onChange={(e)=> setQ1(parseFloat(e.target.value))}\n                                       style={{ width: \"100%\", padding: 8, border: \"1px solid #cbd5e1\", borderRadius: 8 }} />\n                            </div>\n                            <div>\n                                <label style={{ fontSize: 13 }}>q2 ({unit})</label>\n                                <input type=\"number\" step={0.1} value={q2} onChange={(e)=> setQ2(parseFloat(e.target.value))}\n                                       style={{ width: \"100%\", padding: 8, border: \"1px solid #cbd5e1\", borderRadius: 8 }} />\n                            </div>\n                        </div>\n\n                        <div style={{ height: 1, background: \"#e5e7eb\", margin: \"4px 0\" }} />\n\n                        <div style={{ fontWeight: 600, marginBottom: 4 }}>Scala</div>\n                        <label style={{ fontSize: 13 }}>px per metro: <b>{pxPerMeter}</b></label>\n                        <input type=\"range\" min={20} max={200} step={1} value={pxPerMeter} onChange={(e)=> setPxPerMeter(parseFloat(e.target.value))} />\n\n                        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr auto\", gap: 8, alignItems: \"center\" }}>\n                            <label style={{ fontSize: 13 }}>gain vettori (px/N): <b>{Math.round(gain)}</b></label>\n                            <button onClick={autoScale} style={{ padding: \"6px 10px\", borderRadius: 8, border: \"1px solid #cbd5e1\", background: \"#fff\" }}>Auto‑scala frecce</button>\n                        </div>\n                        <input type=\"range\" min={5} max={5000} step={5} value={gain} onChange={(e)=> setGain(parseFloat(e.target.value))} />\n\n                        <label style={{ display: \"flex\", alignItems: \"center\", gap: 8, marginTop: 4 }}>\n                            <input type=\"checkbox\" checked={showForces} onChange={(e)=> setShowForces(e.target.checked)} /> Mostra forze\n                        </label>\n\n                        <div style={{ display: \"flex\", gap: 8, flexWrap: \"wrap\", marginTop: 6 }}>\n                            <button\n                                onClick={()=>{ setQ1(3); setQ2(-4); setUnit(\"µC\"); setP1({x: WIDTH*0.33, y: HEIGHT*0.52}); setP2({x: WIDTH*0.67, y: HEIGHT*0.38}); setGain(500); setPxPerMeter(60); }}\n                                style={{ padding: \"6px 10px\", borderRadius: 8, border: \"1px solid #cbd5e1\", background: \"#fff\" }}\n                            >Reimposta</button>\n                            <button onClick={randomizePositions}\n                                    style={{ padding: \"6px 10px\", borderRadius: 8, border: \"1px solid #cbd5e1\", background: \"#fff\" }}>Randomizza posizioni</button>\n                        </div>\n\n                        <div style={{ height: 1, background: \"#e5e7eb\", margin: \"4px 0\" }} />\n\n                        <div style={{ fontWeight: 600, marginBottom: 4 }}>Valori istantanei</div>\n                        {coincidenti ? (\n                            <div style={{ color: \"#b91c1c\", fontSize: 13 }}>Le cariche sono troppo vicine/sovrapposte: r ≈ 0 → forza non definita.</div>\n                        ) : (\n                            <div style={{ fontSize: 13, color: \"#334155\", display: \"grid\", gap: 4 }}>\n                                <div>q1 = <b>{q1}</b> {unit} = <b>{q1C.toExponential(2)}</b> C</div>\n                                <div>q2 = <b>{q2}</b> {unit} = <b>{q2C.toExponential(2)}</b> C</div>\n                                <div>r = <b>{r_m.toFixed(3)}</b> m</div>\n                                <div>|F| = k |q1 q2| / r² = <b>{Fmag.toExponential(3)}</b> N</div>\n                                <div>Direzione: lungo la congiungente q1→q2</div>\n                                <div>Verso: <b>{verso}</b></div>\n                                <div>F1 (componenti): (<b>{F1x.toExponential(3)}</b>, <b>{F1y.toExponential(3)}</b>) N</div>\n                                <div>Angolo F1 rispetto all'asse x: <b>{isFinite(angle1) ? angle1.toFixed(1) : \"–\"}°</b></div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n\n            <div style={{ marginTop: 10, color: \"#64748b\", fontSize: 12 }}>\n                Suggerimenti: trascina i dischi colorati. Prova cariche entrambe positive (repulsione) o di segno opposto (attrazione). Riduci la distanza o aumenta i microcoulomb, poi usa <b>Auto‑scala</b> per avere frecce ben visibili.\n            </div>\n        </div>\n    );\n}\n"],"names":["K","WIDTH","HEIGHT","PAD","CHARGE_UNITS","UNIT_TO_COULOMB","nC","mC","C","clamp","x","a","b","Math","max","min","hypot","dx","dy","toDeg","rad","PI","Arrow","_ref","x1","y1","x2","y2","color","label","L","ux","uy","backX","backY","leftX","leftY","rightX","rightY","_jsxs","children","_jsx","stroke","strokeWidth","points","concat","fill","y","fontSize","textAnchor","LeggeCoulombDemo","unit","setUnit","useState","pxPerMeter","setPxPerMeter","gain","setGain","showForces","setShowForces","q1","setQ1","q2","setQ2","p1","setP1","p2","setP2","svgRef","useRef","drag","setDrag","q1C","useMemo","q2C","r_px","r_m","coincidenti","prod","Fmag","abs","sign","F1x","F1y","F2x","F2y","vpx","F","F1x_px","F1y_px","F2x_px","F2y_px","angle1","atan2","verso","startDrag","which","e","_setPointerCapture","_ref2","currentTarget","setPointerCapture","call","pointerId","id","endDrag","circleCursor","style","maxWidth","margin","padding","fontWeight","marginBottom","marginTop","display","gridTemplateColumns","gap","background","borderRadius","boxShadow","ref","viewBox","width","height","onPointerMove","m","rect","current","getBoundingClientRect","clientX","left","clientY","top","ptrToLocal","nx","ny","onPointerUp","onPointerCancel","onPointerLeave","rx","Array","from","length","_","i","map","strokeDasharray","_Fragment","cursor","cx","cy","r","onPointerDown","pointerEvents","toFixed","alignItems","value","onChange","target","u","type","step","parseFloat","border","round","onClick","checked","flexWrap","rnd","random","tries","toExponential","isFinite"],"sourceRoot":""}