{"version":3,"file":"static/js/866.c2af4ff9.chunk.js","mappings":"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","sources":["demos/angolo-rotazione/AngleRotationDemo.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from \"react\";\n\n// Conversioni e formattazione radianti\nconst DEG2RAD = Math.PI / 180;\n\n// Prova a scrivere i radianti come multipli \"puliti\" di π (es. π/6, 3π/4)\nfunction formatRadPi(rad: number): string {\n    const k = rad / Math.PI; // multiplo di π\n    const dens = [1, 2, 3, 4, 6, 8, 12, 16]; // denominatori comuni\n    for (const d of dens) {\n        const n = Math.round(k * d);\n        if (Math.abs(k - n / d) < 1e-3) {\n            if (n === 0) return \"0\";\n            if (d === 1) return `${n}π`;\n            return `${n}π/${d}`;\n        }\n    }\n    return rad.toFixed(3);\n}\n\n// Demo interattiva: angolo come rotazione (CCW positivo)\nexport default function AngleRotationDemo() {\n    const [angleDeg, setAngleDeg] = useState(35);\n    const [isAnimating, setIsAnimating] = useState(false);\n    const [speed, setSpeed] = useState(30); // deg/s\n    const [direction, setDirection] = useState(1); // 1 = CCW, -1 = CW\n    const [showProjections, setShowProjections] = useState(true);\n\n    // nuovi toggle\n    const [highlightArc, setHighlightArc] = useState(false);\n    const [highlightRadius, setHighlightRadius] = useState(false);\n\n    const svgRef = useRef<SVGSVGElement | null>(null);\n\n    const size = 420;\n    const cx = size / 2;\n    const cy = size / 2;\n    const R = 160;\n\n    // Convenzione matematica: CCW positivo\n    const angleRad = useMemo(() => angleDeg * DEG2RAD, [angleDeg]);\n\n    // Animazione continua\n    useEffect(() => {\n        if (!isAnimating) return;\n        let raf: number;\n        let last = performance.now();\n        const tick = (t: number) => {\n            const dt = (t - last) / 1000;\n            last = t;\n            setAngleDeg((a) => {\n                let next = a + direction * speed * dt; // direction=1 => CCW positivo\n                if (next > 720) next -= 720;\n                if (next < -720) next += 720;\n                return next;\n            });\n            raf = requestAnimationFrame(tick);\n        };\n        raf = requestAnimationFrame(tick);\n        return () => cancelAnimationFrame(raf);\n    }, [isAnimating, speed, direction]);\n\n    // Drag: estrai angolo con CCW positivo (y invertita)\n    function onPointerDown(e: React.PointerEvent<SVGSVGElement>) {\n        const svg = svgRef.current;\n        if (!svg) return;\n\n        const el = e.currentTarget; // <svg> stabile nella closure\n        el.setPointerCapture?.(e.pointerId);\n\n        const handleMove = (ev: PointerEvent) => {\n            const pt = svg.createSVGPoint();\n            pt.x = ev.clientX;\n            pt.y = ev.clientY;\n            const ctm = svg.getScreenCTM();\n            if (!ctm) return;\n            const p = pt.matrixTransform(ctm.inverse());\n\n            const dx = p.x - cx;\n            const dy = p.y - cy;\n            const ang = Math.atan2(-dy, dx); // CCW positivo\n            setAngleDeg((ang * 180) / Math.PI);\n        };\n\n        const handleUp = () => {\n            try {\n                el.releasePointerCapture?.(e.pointerId);\n            } catch {}\n            window.removeEventListener(\"pointermove\", handleMove);\n            window.removeEventListener(\"pointerup\", handleUp);\n        };\n\n        window.addEventListener(\"pointermove\", handleMove, { passive: false });\n        window.addEventListener(\"pointerup\", handleUp, { passive: true });\n    }\n\n    // Converte un angolo (in CONVENZIONE MATEMATICA) in coordinate SVG\n    function polarToXY(r: number, angRad: number) {\n        // y con segno opposto perché in SVG l'asse cresce verso il basso\n        return { x: cx + r * Math.cos(angRad), y: cy - r * Math.sin(angRad) };\n    }\n\n    const P = polarToXY(R, angleRad);\n    const Px = { x: P.x, y: cy };\n    const Py = { x: cx, y: P.y };\n\n    // Arco \"piccolo\" vicino al centro, r = 60 (indicatore dell’angolo)\n    function arcPathSmall() {\n        const a = angleDeg;\n        if (Math.abs(a) < 1e-6) return \"\";\n        const largeArc = Math.abs(a) > 180 ? 1 : 0;\n        const sweep = a >= 0 ? 0 : 1; // positivo (CCW) => sweep 0\n        const start = polarToXY(60, 0);\n        const end = polarToXY(60, angleRad);\n        return `M ${start.x} ${start.y} A 60 60 0 ${largeArc} ${sweep} ${end.x} ${end.y}`;\n    }\n\n    // Arco \"grande\" sulla circonferenza principale, r = R\n    function arcPathOnCircle() {\n        const a = angleDeg;\n        if (Math.abs(a) < 1e-6) return \"\";\n        const largeArc = Math.abs(a) > 180 ? 1 : 0;\n        const sweep = a >= 0 ? 0 : 1; // CCW visivo\n        const start = polarToXY(R, 0);\n        const end = polarToXY(R, angleRad);\n        return `M ${start.x} ${start.y} A ${R} ${R} 0 ${largeArc} ${sweep} ${end.x} ${end.y}`;\n    }\n\n    return (\n        <div style={{ maxWidth: \"900px\", margin: \"auto\", padding: \"1rem\" }}>\n            <h1 style={{ fontSize: \"1.5rem\", fontWeight: \"bold\", marginBottom: \"0.5rem\" }}>\n                Angolo come rotazione\n            </h1>\n            <p style={{ fontSize: \"0.9rem\", color: \"#4b5563\", marginBottom: \"1rem\" }}>\n                Trascina il punto blu sulla circonferenza, usa lo slider o avvia l'animazione.\n                Convenzione: <b>antiorario = angoli positivi</b>.\n            </p>\n\n            <div style={{ display: \"grid\", gap: \"1.5rem\", gridTemplateColumns: \"1fr 1fr\" }}>\n                <div style={{ background: \"white\", borderRadius: 16, padding: 8, boxShadow: \"0 1px 4px rgba(0,0,0,0.1)\" }}>\n                    <svg\n                        ref={svgRef}\n                        viewBox={`0 0 ${size} ${size}`}\n                        style={{ width: \"100%\", height: \"auto\", cursor: \"crosshair\", touchAction: \"none\" }}\n                        onPointerDown={onPointerDown}\n                    >\n                        <rect x={0} y={0} width={size} height={size} fill=\"white\" />\n                        {/* circonferenza */}\n                        <circle cx={cx} cy={cy} r={R} fill=\"none\" stroke=\"#e5e7eb\" strokeWidth={2} />\n\n                        {/* se richiesto: arco colorato sulla circonferenza principale */}\n                        {highlightArc && (\n                            <path\n                                d={arcPathOnCircle()}\n                                fill=\"none\"\n                                stroke=\"#ef4444\"\n                                strokeWidth={6}\n                                strokeLinecap=\"round\"\n                            />\n                        )}\n\n                        {/* assi */}\n                        <line x1={cx - R - 12} y1={cy} x2={cx + R + 12} y2={cy} stroke=\"#d1d5db\" strokeDasharray=\"6 6\" />\n                        <line x1={cx} y1={cy - R - 12} x2={cx} y2={cy + R + 12} stroke=\"#d1d5db\" strokeDasharray=\"6 6\" />\n\n                        {/* lato iniziale (asse x positivo) */}\n                        <line x1={cx} y1={cy} x2={cx + R} y2={cy} stroke=\"#9ca3af\" strokeWidth={3} />\n\n                        {/* arco angolo \"piccolo\" vicino al centro (sempre visibile) */}\n                        <path d={arcPathSmall()} fill=\"none\" stroke=\"#3b82f6\" strokeWidth={5} />\n\n                        {/* lato finale (raggio) */}\n                        <line\n                            x1={cx}\n                            y1={cy}\n                            x2={P.x}\n                            y2={P.y}\n                            stroke={highlightRadius ? \"#f59e0b\" : \"#111827\"}\n                            strokeWidth={highlightRadius ? 6 : 4}\n                        />\n\n                        {/* proiezioni */}\n                        {showProjections && (\n                            <g>\n                                <line x1={P.x} y1={P.y} x2={Px.x} y2={Px.y} stroke=\"#a8a29e\" strokeDasharray=\"4 4\" />\n                                <line x1={P.x} y1={P.y} x2={Py.x} y2={Py.y} stroke=\"#a8a29e\" strokeDasharray=\"4 4\" />\n                                <circle cx={Px.x} cy={Px.y} r={4} fill=\"#a8a29e\" />\n                                <circle cx={Py.x} cy={Py.y} r={4} fill=\"#a8a29e\" />\n                            </g>\n                        )}\n\n                        <circle cx={cx} cy={cy} r={5} fill=\"#111827\" />\n                        <circle cx={P.x} cy={P.y} r={9} fill=\"#3b82f6\" />\n                        <text x={cx + R + 10} y={cy - 8} fontSize={12} fill=\"#6b7280\">\n                            lato iniziale\n                        </text>\n                    </svg>\n                </div>\n\n                <div style={{ background: \"white\", borderRadius: 16, padding: 16, boxShadow: \"0 1px 4px rgba(0,0,0,0.1)\" }}>\n                    <div>\n                        <label>Angolo (°)</label>\n                        <input\n                            type=\"range\"\n                            min={-360}\n                            max={360}\n                            step={1}\n                            value={angleDeg}\n                            onChange={(e) => setAngleDeg(parseFloat(e.target.value))}\n                            style={{ width: \"100%\" }}\n                        />\n                        <div style={{ fontSize: \"2rem\", fontWeight: \"bold\" }}>\n                            {angleDeg.toFixed(1)}°\n                            <span style={{ marginLeft: 12, fontSize: 16, color: \"#6b7280\" }}>\n                ({(angleDeg * DEG2RAD).toFixed(3)} rad = {formatRadPi(angleDeg * DEG2RAD)})\n              </span>\n                        </div>\n                    </div>\n\n                    <div style={{ marginTop: 16, display: \"flex\", gap: 8, flexWrap: \"wrap\" }}>\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: \"black\", color: \"white\", border: 0 }}\n                            onClick={() => setIsAnimating((v) => !v)}\n                        >\n                            {isAnimating ? \"Pausa\" : \"Avvia animazione\"}\n                        </button>\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: \"#f3f4f6\", border: 0 }}\n                            onClick={() => setAngleDeg(0)}\n                        >\n                            Reset\n                        </button>\n\n                        {/* nuovi pulsanti */}\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: highlightArc ? \"#fecaca\" : \"#f3f4f6\", border: 0 }}\n                            onClick={() => setHighlightArc((s) => !s)}\n                        >\n                            {highlightArc ? \"Nascondi arco\" : \"Evidenzia arco sulla circonferenza\"}\n                        </button>\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: highlightRadius ? \"#fde68a\" : \"#f3f4f6\", border: 0 }}\n                            onClick={() => setHighlightRadius((s) => !s)}\n                        >\n                            {highlightRadius ? \"Raggio normale\" : \"Evidenzia raggio\"}\n                        </button>\n\n                        <div style={{ display: \"flex\", alignItems: \"center\", gap: 6 }}>\n                            <label style={{ display: \"flex\", alignItems: \"center\", gap: 6 }}>\n                                Velocità (°/s)\n                                <input\n                                    type=\"number\"\n                                    value={speed}\n                                    onChange={(e) => setSpeed(parseFloat(e.target.value || \"0\"))}\n                                    style={{ width: 80 }}\n                                />\n                            </label>\n                            <label style={{ display: \"flex\", alignItems: \"center\", gap: 6 }}>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={direction === -1}\n                                    onChange={(e) => setDirection(e.target.checked ? -1 : 1)}\n                                />\n                                Senso orario (angoli negativi)\n                            </label>\n                        </div>\n                    </div>\n\n                    <div style={{ marginTop: 16 }}>\n                        <label style={{ display: \"block\" }}>\n                            <input\n                                type=\"checkbox\"\n                                checked={showProjections}\n                                onChange={(e) => setShowProjections(e.target.checked)}\n                            />\n                            Mostra proiezioni (cosθ, sinθ)\n                        </label>\n                    </div>\n\n                    <p style={{ fontSize: \"0.9rem\", marginTop: 16 }}>\n                        L'angolo è la rotazione dal lato iniziale (asse x positivo) al lato finale. Con proiezioni attive,\n                        la coordinata x = cos θ e la y = sin θ. Convenzione: antiorario = positivo.\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":["DEG2RAD","Math","PI","formatRadPi","rad","k","dens","d","n","round","abs","concat","toFixed","AngleRotationDemo","angleDeg","setAngleDeg","useState","isAnimating","setIsAnimating","speed","setSpeed","direction","setDirection","showProjections","setShowProjections","highlightArc","setHighlightArc","highlightRadius","setHighlightRadius","svgRef","useRef","size","cx","cy","R","angleRad","useMemo","polarToXY","r","angRad","x","cos","y","sin","useEffect","raf","last","performance","now","tick","t","dt","a","next","requestAnimationFrame","cancelAnimationFrame","P","Px","Py","_jsxs","style","maxWidth","margin","padding","children","_jsx","fontSize","fontWeight","marginBottom","color","display","gap","gridTemplateColumns","background","borderRadius","boxShadow","ref","viewBox","width","height","cursor","touchAction","onPointerDown","e","_el$setPointerCapture","svg","current","el","currentTarget","setPointerCapture","call","pointerId","handleMove","ev","pt","createSVGPoint","clientX","clientY","ctm","getScreenCTM","p","matrixTransform","inverse","dx","dy","ang","atan2","handleUp","_el$releasePointerCap","releasePointerCapture","_unused","window","removeEventListener","addEventListener","passive","fill","stroke","strokeWidth","largeArc","sweep","start","end","arcPathOnCircle","strokeLinecap","x1","y1","x2","y2","strokeDasharray","arcPathSmall","type","min","max","step","value","onChange","parseFloat","target","marginLeft","marginTop","flexWrap","border","onClick","v","s","alignItems","checked"],"sourceRoot":""}