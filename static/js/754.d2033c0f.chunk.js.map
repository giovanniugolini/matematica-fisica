{"version":3,"file":"static/js/754.d2033c0f.chunk.js","mappings":"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","sources":["demos/campo-elettrico/CampoElettricoDemo.tsx"],"sourcesContent":["import React, { useMemo, useRef, useState, useEffect } from \"react\";\n\n/**\n * Campo elettrico — pannello semplice stile \"legge di Coulomb\"\n *\n * Drag&drop robusto con Pointer Events (e capture sullo <svg>),\n * hit-test in PIXEL coerente con letterboxing, vincolo distanza ≤ 5 m,\n * e (opzionale) simulazione del moto della carica di prova con F = q_t E.\n */\n\nconst K = 8.9875517923e9; // N·m²/C²\n// 20 m × 14 m, come l'altro pannello\nconst WORLD = { xmin: -10, xmax: 10, ymin: -7, ymax: 7 };\nconst MAX_DIST = 5; // m: distanza massima consentita tra sorgente e prova\n\ntype Vec2 = { x: number; y: number };\n\nfunction clamp(v: number, a: number, b: number) { return Math.max(a, Math.min(b, v)); }\nfunction length(v: Vec2) { return Math.hypot(v.x, v.y); }\nfunction normalize(v: Vec2): Vec2 { const L = length(v); return L === 0 ? { x: 0, y: 0 } : { x: v.x / L, y: v.y / L }; }\nfunction constrainWithinRadius(p: Vec2, center: Vec2, R: number): Vec2 {\n    const dx = p.x - center.x, dy = p.y - center.y;\n    const d = Math.hypot(dx, dy);\n    if (d <= R || d === 0) return p;\n    const f = R / d; return { x: center.x + dx * f, y: center.y + dy * f };\n}\n\nfunction worldToPxFactory(svgWidth: number, svgHeight: number) {\n    const { xmin, xmax, ymin, ymax } = WORLD;\n    const worldW = xmax - xmin;\n    const worldH = ymax - ymin;\n    const s = Math.min(svgWidth / worldW, svgHeight / worldH); // \"meet\"\n    const offsetX = (svgWidth - s * worldW) / 2;\n    const offsetY = (svgHeight - s * worldH) / 2;\n    return {\n        toX: (x: number) => offsetX + (x - xmin) * s,\n        toY: (y: number) => svgHeight - (offsetY + (y - ymin) * s),\n        fromX: (px: number) => xmin + (px - offsetX) / s,\n        fromY: (py: number) => ymin + (svgHeight - py - offsetY) / s,\n        s, offsetX, offsetY,\n    };\n}\n\nexport type EField = { Ex: number; Ey: number; Emag: number };\nfunction E_field_at(p: Vec2, source: Vec2, qCoulomb: number): EField {\n    const soft = 0.05; // m\n    const r = { x: p.x - source.x, y: p.y - source.y };\n    let r2 = r.x * r.x + r.y * r.y;\n    r2 = Math.max(r2, soft * soft);\n    const Emag = K * qCoulomb / r2; // N/C\n    const dir = normalize(r);\n    return { Ex: Emag * dir.x, Ey: Emag * dir.y, Emag };\n}\nconst E_at = E_field_at;\n\nfunction Arrow({ x, y, vx, vy, toX, toY, color, lenWorld = 0.5 }: {\n    x: number; y: number; vx: number; vy: number; toX: (x: number) => number; toY: (y: number) => number; color: string; lenWorld?: number;\n}) {\n    const dir = normalize({ x: vx, y: vy });\n    const tip = { x: x + dir.x * lenWorld, y: y + dir.y * lenWorld };\n    const X1 = toX(x), Y1 = toY(y);\n    const X2 = toX(tip.x), Y2 = toY(tip.y);\n    const headSize = 6; // px\n    const ang = Math.atan2(Y2 - Y1, X2 - X1);\n    const hx = X2 - headSize * Math.cos(ang);\n    const hy = Y2 - headSize * Math.sin(ang);\n    const left = { x: hx + headSize * 0.6 * Math.cos(ang + Math.PI / 2), y: hy + headSize * 0.6 * Math.sin(ang + Math.PI / 2) };\n    const right = { x: hx + headSize * 0.6 * Math.cos(ang - Math.PI / 2), y: hy + headSize * 0.6 * Math.sin(ang - Math.PI / 2) };\n    return (\n        <g>\n            <line x1={X1} y1={Y1} x2={X2} y2={Y2} stroke={color} strokeWidth={2} />\n            <polygon points={`${X2},${Y2} ${left.x},${left.y} ${right.x},${right.y}`} fill={color} />\n        </g>\n    );\n}\n\nexport default function CampoElettricoPuntualeDemo() {\n    const WIDTH = 900; const HEIGHT = 560;\n    const svgRef = useRef<SVGSVGElement | null>(null);\n\n\n    const { toX, toY, fromX, fromY, offsetX, offsetY } = useMemo(\n        () => worldToPxFactory(WIDTH, HEIGHT), // 👉 mapping in unità del viewBox\n        [WIDTH, HEIGHT]\n    );\n\n    // Stato fisico\n    const [source, setSource] = useState<Vec2>({ x: -1.5, y: 0 });\n    const [qMicro, setQMicro] = useState<number>(500); // μC\n    const qSourceC = qMicro * 1e-6; // C\n\n    const [test, setTest] = useState<Vec2>({ x: 2, y: 1 });\n    const [qTestNano, setQTestNano] = useState<number>(1); // nC\n    const qTestC = qTestNano * 1e-9; // C\n    const [showTest, setShowTest] = useState<boolean>(false);\n\n\n    // Simulazione del moto della carica di prova\n\n\n    const [showField, setShowField] = useState<boolean>(true);\n    const [grid, setGrid] = useState<number>(28);\n    const [vecScale, setVecScale] = useState<number>(0.80);\n\n    // Drag & hover (Pointer Events)\n    const [dragging, setDragging] = useState<null | \"source\" | \"test\">(null);\n    const [hoverTarget, setHoverTarget] = useState<null | \"source\" | \"test\">(null);\n\n    function getWorldPointFromClient(clientX: number, clientY: number, svgEl: SVGSVGElement) {\n        const rect = svgEl.getBoundingClientRect();\n        // converti da px CSS -> unità del viewBox\n        const xView = (clientX - rect.left) * (WIDTH / rect.width);\n        const yView = (clientY - rect.top) * (HEIGHT / rect.height);\n        return { x: fromX(xView), y: fromY(yView) };\n    }\n\n    function getLocalPxFromClient(clientX: number, clientY: number, svgEl: SVGSVGElement) {\n        const rect = svgEl.getBoundingClientRect();\n        // restituisci coordinate nel sistema del viewBox (coerente con toX/toY)\n        const xView = (clientX - rect.left) * (WIDTH / rect.width);\n        const yView = (clientY - rect.top) * (HEIGHT / rect.height);\n        return { x: xView, y: yView };\n    }\n\n    function nearChargeAtPointerPx(mousePx: {x:number;y:number}, chargeWorld: Vec2, radiusPx = 22) {\n        const cx = toX(chargeWorld.x), cy = toY(chargeWorld.y);\n        const dx = cx - mousePx.x, dy = cy - mousePx.y;\n        return Math.hypot(dx, dy) <= radiusPx;\n    }\n\n    function onPointerDown(e: React.PointerEvent<SVGSVGElement>) {\n        const svgEl = e.currentTarget as SVGSVGElement;\n        const px = getLocalPxFromClient(e.clientX, e.clientY, svgEl);\n\n        let target: null | \"source\" | \"test\" = null;\n        if (nearChargeAtPointerPx(px, source)) target = \"source\";\n        else if (showTest && nearChargeAtPointerPx(px, test)) target = \"test\"; // <-- rispetta showTest\n\n        if (target) {\n            setDragging(target);\n            (svgRef.current as any)?.setPointerCapture?.((e as any).pointerId);\n        }\n    }\n\n    function onPointerMove(e: React.PointerEvent<SVGSVGElement>) {\n        const svgEl = e.currentTarget as SVGSVGElement;\n        const px = getLocalPxFromClient(e.clientX, e.clientY, svgEl);\n\n        if (!dragging) {\n            const h = nearChargeAtPointerPx(px, source, 14)\n                ? \"source\"\n                : (showTest && nearChargeAtPointerPx(px, test, 14) ? \"test\" : null); // <-- rispetta showTest\n            setHoverTarget(h);\n            return;\n        }\n\n\n        let p = getWorldPointFromClient(e.clientX, e.clientY, svgEl);\n        p.x = clamp(p.x, WORLD.xmin, WORLD.xmax);\n        p.y = clamp(p.y, WORLD.ymin, WORLD.ymax);\n\n        if (dragging === \"source\") {\n            p = constrainWithinRadius(p, test, MAX_DIST);\n            setSource(p);\n        } else if (dragging === \"test\") {\n            p = constrainWithinRadius(p, source, MAX_DIST);\n            setTest(p);\n        }\n    }\n    function onPointerUp(e: React.PointerEvent<SVGSVGElement>) {\n        try { (svgRef.current as any)?.releasePointerCapture?.((e as any).pointerId); } catch {}\n        setDragging(null);\n    }\n    function onPointerLeave() { setDragging(null); }\n\n    // Calcoli al punto di prova\n    const testField: EField = useMemo(() => E_at(test, source, qSourceC), [test, source, qSourceC]);\n    const testForce = useMemo(() => ({ Fx: qTestC * testField.Ex, Fy: qTestC * testField.Ey }), [testField, qTestC]);\n    const Fmag = Math.hypot(testForce.Fx, testForce.Fy);\n\n\n    // Griglia vettori\n    const gridPts: Vec2[] = useMemo(() => {\n        const pts: Vec2[] = [];\n        const nx = grid, ny = Math.round(grid * ( (WORLD.ymax - WORLD.ymin) / (WORLD.xmax - WORLD.xmin) ));\n        for (let i = 0; i < nx; i++) {\n            const x = WORLD.xmin + (i + 0.5) * (WORLD.xmax - WORLD.xmin) / nx;\n            for (let j = 0; j < ny; j++) {\n                const y = WORLD.ymin + (j + 0.5) * (WORLD.ymax - WORLD.ymin) / ny;\n                const r2 = (x - source.x) ** 2 + (y - source.y) ** 2;\n                if (r2 < 0.06 * 0.06) continue; // evita frecce troppo vicine alla sorgente\n                pts.push({ x, y });\n            }\n        }\n        return pts;\n    }, [grid, source]);\n\n    function lenFromEmag(Emag: number) {\n        const Lmax = vecScale; const E0 = 2e5;\n        return Lmax * (1 - Math.exp(-Emag / E0));\n    }\n\n    // Self-tests (dev)\n    useEffect(() => {\n        if (process.env.NODE_ENV !== \"development\") return;\n        const wx = 3.2, wy = -1.1;\n        const px = toX(wx), py = toY(wy);\n        const wx2 = fromX(px), wy2 = fromY(py);\n        console.assert(Math.abs(wx - wx2) < 1e-6 && Math.abs(wy - wy2) < 1e-6, \"[TEST] mapping world<->pixel\");\n        const s = source; const q = (qSourceC === 0 ? 1e-9 : qSourceC);\n        const p1 = { x: s.x + 2, y: s.y + 1 }; const E1 = E_at(p1, s, q);\n        const r1 = { x: p1.x - s.x, y: p1.y - s.y }; const dot = r1.x * E1.Ex + r1.y * E1.Ey;\n        console.assert((q > 0 ? dot > 0 : dot < 0), \"[TEST] direzione E\");\n    }, [toX, toY, fromX, fromY, source, qSourceC]);\n\n    const card: React.CSSProperties = { background: \"#fff\", borderRadius: 16, padding: 12, boxShadow: \"0 1px 4px rgba(0,0,0,0.1)\" };\n    const cursor = dragging ? \"grabbing\" : (hoverTarget ? \"grab\" : \"crosshair\");\n    const chip = (text: string, color = \"#e2e8f0\") => (<span style={{ background: color, borderRadius: 999, fontSize: 12, padding: \"2px 8px\" }}>{text}</span>);\n\n    return (\n        <div className=\"container page--fisica\">\n            <h1>Campo elettrico (carica puntiforme)</h1>\n            <p className=\"muted\">Trascina la <b>carica sorgente</b> e la <b>carica di prova</b>. Distanza bloccata a ≤ 5 m. {chip(\"E in N/C\")} {chip(\"F in N\")} </p>\n\n            <div className=\"grid-2\">\n                <div className=\"card\" style={card}>\n                    <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginBottom: 8 }}>\n                        <div style={{ fontWeight: 600 }}>Piano (x,y) in metri</div>\n                        <div style={{ display: \"flex\", gap: 8 }}>\n                            <button className=\"btn\" onClick={() => setShowField((s) => !s)}>\n                                {showField ? \"Nascondi\" : \"Mostra\"} vettori\n                            </button>\n                            <button className=\"btn\" onClick={() => setShowTest(s => !s)}>\n                                {showTest ? \"Nascondi carica di prova\" : \"Mostra carica di prova\"}\n                            </button>\n                        </div>\n                    </div>\n\n                    <svg\n                        ref={svgRef}\n                        viewBox={`0 0 ${WIDTH} ${HEIGHT}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                        style={{ width: \"100%\", height: \"min(70vh, 560px)\", cursor, touchAction: \"none\" }}\n                        onPointerDown={onPointerDown}\n                        onPointerMove={onPointerMove}\n                        onPointerUp={onPointerUp}\n                        onPointerLeave={onPointerLeave}\n                    >\n                        {/* fondo */}\n                        <rect x={0} y={0} width={WIDTH} height={HEIGHT} fill=\"#fff\" rx={16} />\n\n                        {/* griglia */}\n                        {Array.from({ length: 11 }, (_, i) => WORLD.xmin + i * (WORLD.xmax - WORLD.xmin) / 10).map((vx) => (\n                            <line key={`vx-${vx}`} x1={toX(vx)} y1={offsetY} x2={toX(vx)} y2={HEIGHT - offsetY} stroke=\"#eef2f7\" />\n                        ))}\n\n                        {Array.from({ length: 8 }, (_, j) => WORLD.ymin + j * (WORLD.ymax - WORLD.ymin) / 7).map((vy) => (\n                            <line key={`vy-${vy}`} x1={offsetX} y1={toY(vy)} x2={WIDTH - offsetX} y2={toY(vy)} stroke=\"#eef2f7\" />\n                        ))}\n\n\n                        {/* assi */}\n                        <line x1={toX(WORLD.xmin)} y1={toY(0)} x2={toX(WORLD.xmax)} y2={toY(0)} stroke=\"#0f172a\" />\n                        <line x1={toX(0)} y1={toY(WORLD.ymin)} x2={toX(0)} y2={toY(WORLD.ymax)} stroke=\"#0f172a\" />\n\n                        {/* vettori di campo */}\n                        {showField && gridPts.map((p, idx) => {\n                            const E = E_at(p, source, qSourceC);\n                            const L = lenFromEmag(E.Emag);\n                            const color = qSourceC >= 0 ? \"#2563eb\" : \"#1d4ed8\";\n                            return <Arrow key={idx} x={p.x} y={p.y} vx={E.Ex} vy={E.Ey} lenWorld={L} toX={toX} toY={toY} color={color} />;\n                        })}\n\n                        {/* sorgente */}\n                        {(() => {\n                            const X = toX(source.x), Y = toY(source.y);\n                            const signPos = qSourceC >= 0;\n                            const fill = signPos ? \"#ef4444\" : \"#3b82f6\";\n                            const text = signPos ? \"+\" : \"−\";\n                            return (\n                                <g onPointerDown={(e)=>{ e.stopPropagation(); setDragging(\"source\"); (svgRef.current as any)?.setPointerCapture?.((e as any).pointerId); }} style={{ cursor: dragging==='source' ? 'grabbing' : 'grab' }}>\n                                    <circle cx={X} cy={Y} r={14} fill={fill} stroke=\"#0f172a\" strokeWidth={1} />\n                                    <text x={X} y={Y + 4} fontSize={18} textAnchor=\"middle\" fill=\"#fff\" fontWeight={700}>{text}</text>\n                                    <text x={X + 18} y={Y - 18} fontSize={12} fill=\"#0f172a\">q = {qMicro.toFixed(2)} μC</text>\n                                </g>\n                            );\n                        })()}\n\n                        {/* prova */}\n                        {/* prova (nascondibile) */}\n                        {(() => {\n                            if (!showTest) return null;                // <-- se nascosta, non disegniamo nulla\n                            const X = toX(test.x), Y = toY(test.y);\n                            const E = testField;                       // campo nel punto di prova\n                            const L_E = lenFromEmag(E.Emag);\n                            const F = testForce;                       // forza nel punto di prova\n                            const dirF = { x: F.Fx, y: F.Fy };\n\n                            return (\n                                <g\n                                    onPointerDown={(e) => {\n                                        e.stopPropagation();\n                                        setDragging(\"test\");\n                                        (svgRef.current as any)?.setPointerCapture?.((e as any).pointerId);\n                                    }}\n                                    style={{ cursor: dragging === \"test\" ? \"grabbing\" : \"grab\" }}\n                                >\n                                    {/* SOLO vettore F (verde) applicato alla prova */}\n                                    <Arrow\n                                        x={test.x} y={test.y}\n                                        vx={dirF.x} vy={dirF.y}\n                                        lenWorld={L_E * 0.9}\n                                        toX={toX} toY={toY}\n                                        color=\"#10b981\"\n                                    />\n                                    <circle cx={X} cy={Y} r={10} fill=\"#f59e0b\" stroke=\"#0f172a\" />\n                                    <text x={X + 14} y={Y - 12} fontSize={12} fill=\"#0f172a\">\n                                        q_t = {qTestNano.toFixed(2)} nC\n                                    </text>\n                                </g>\n                            );\n                        })()}\n\n                    </svg>\n\n                    <div style={{ display: \"flex\", gap: 16, alignItems: \"center\", marginTop: 8, flexWrap: \"wrap\" }}>\n                        <label> Densità griglia\n                            <input type=\"range\" min={8} max={28} step={1} value={grid} onChange={(e) => setGrid(parseInt(e.target.value))} style={{ marginLeft: 8 }} />\n                            <span className=\"badge\" style={{ marginLeft: 6 }}>{grid}</span>\n                        </label>\n                        <label> Scala vettori\n                            <input type=\"range\" min={0.2} max={1.2} step={0.05} value={vecScale} onChange={(e) => setVecScale(parseFloat(e.target.value))} style={{ marginLeft: 8 }} />\n                            <span className=\"badge\" style={{ marginLeft: 6 }}>{vecScale.toFixed(2)} m</span>\n                        </label>\n                    </div>\n                </div>\n\n                <div className=\"card\" style={card}>\n                    <div style={{ fontWeight: 600, marginBottom: 8 }}>Controlli</div>\n                    <div style={{ display: \"grid\", gap: 10 }}>\n                        <div>\n                            <div style={{ fontWeight: 600, marginBottom: 4 }}>Carica sorgente</div>\n                            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(3, 1fr)\", gap: 8 }}>\n                                <label>x (m)\n                                    <input type=\"number\" value={source.x} step={0.1} onChange={(e) => {\n                                        const nx = clamp(parseFloat(e.target.value), WORLD.xmin, WORLD.xmax);\n                                        let ns = { ...source, x: nx };\n                                        ns = constrainWithinRadius(ns, test, MAX_DIST);\n                                        setSource(ns);\n                                    }} />\n                                </label>\n                                <label>y (m)\n                                    <input type=\"number\" value={source.y} step={0.1} onChange={(e) => {\n                                        const ny = clamp(parseFloat(e.target.value), WORLD.ymin, WORLD.ymax);\n                                        let ns = { ...source, y: ny };\n                                        ns = constrainWithinRadius(ns, test, MAX_DIST);\n                                        setSource(ns);\n                                    }} />\n                                </label>\n                                <label>q (μC)\n                                    <input type=\"number\" value={qMicro} step={0.1} onChange={(e) => setQMicro(parseFloat(e.target.value))} />\n                                </label>\n                            </div>\n                        </div>\n\n                        <div>\n                            <div style={{ fontWeight: 600, marginBottom: 4 }}>Carica di prova</div>\n                            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(3, 1fr)\", gap: 8 }}>\n                                <label>x (m)\n                                    <input type=\"number\" value={test.x} step={0.1} onChange={(e) => {\n                                        const nx = clamp(parseFloat(e.target.value), WORLD.xmin, WORLD.xmax);\n                                        let nt = { ...test, x: nx };\n                                        nt = constrainWithinRadius(nt, source, MAX_DIST);\n                                        setTest(nt);\n                                    }} />\n                                </label>\n                                <label>y (m)\n                                    <input type=\"number\" value={test.y} step={0.1} onChange={(e) => {\n                                        const ny = clamp(parseFloat(e.target.value), WORLD.ymin, WORLD.ymax);\n                                        let nt = { ...test, y: ny };\n                                        nt = constrainWithinRadius(nt, source, MAX_DIST);\n                                        setTest(nt);\n                                    }} />\n                                </label>\n                                <label>q_t (nC)\n                                    <input type=\"number\" value={qTestNano} step={0.1} onChange={(e) => setQTestNano(parseFloat(e.target.value))} />\n                                </label>\n                            </div>\n                        </div>\n\n\n\n                        {/* Letture */}\n                        <div className=\"card\" style={{ padding: 8 }}>\n                            <div style={{ fontWeight: 600, marginBottom: 6 }}>Misure al punto di prova</div>\n                            <div>E = (Ex, Ey) = (<b>{testField.Ex.toExponential(3)}</b>, <b>{testField.Ey.toExponential(3)}</b>) N/C</div>\n                            <div>|E| = <b>{testField.Emag.toExponential(3)}</b> N/C</div>\n                            <div>F = q_t·E = (<b>{(testForce.Fx).toExponential(3)}</b>, <b>{(testForce.Fy).toExponential(3)}</b>) N</div>\n                            <div>|F| = <b>{Fmag.toExponential(3)}</b> N</div>\n                        </div>\n\n                        <div className=\"muted\" style={{ fontSize: 12 }}>\n                            Suggerimenti: il cursore passa a \"grab\" solo quando sei <i>davvero</i> sopra una carica; durante il drag diventa \"grabbing\". La distanza tra cariche è limitata a 5 m.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":["WORLD","xmin","xmax","ymin","ymax","MAX_DIST","clamp","v","a","b","Math","max","min","normalize","L","hypot","x","y","length","constrainWithinRadius","p","center","R","dx","dy","d","f","E_at","source","qCoulomb","r","r2","Emag","dir","Ex","Ey","Arrow","_ref","vx","vy","toX","toY","color","lenWorld","tip","X1","Y1","X2","Y2","ang","atan2","hx","cos","hy","sin","left","PI","right","_jsxs","children","_jsx","x1","y1","x2","y2","stroke","strokeWidth","points","concat","fill","CampoElettricoPuntualeDemo","WIDTH","HEIGHT","svgRef","useRef","fromX","fromY","offsetX","offsetY","useMemo","svgWidth","svgHeight","worldW","worldH","s","px","py","worldToPxFactory","setSource","useState","qMicro","setQMicro","qSourceC","test","setTest","qTestNano","setQTestNano","qTestC","showTest","setShowTest","showField","setShowField","grid","setGrid","vecScale","setVecScale","dragging","setDragging","hoverTarget","setHoverTarget","getLocalPxFromClient","clientX","clientY","svgEl","rect","getBoundingClientRect","width","top","height","nearChargeAtPointerPx","mousePx","chargeWorld","radiusPx","arguments","undefined","cx","cy","testField","testForce","Fx","Fy","Fmag","gridPts","pts","nx","ny","round","i","j","push","lenFromEmag","exp","useEffect","card","background","borderRadius","padding","boxShadow","cursor","chip","text","style","fontSize","className","display","justifyContent","alignItems","marginBottom","fontWeight","gap","onClick","ref","viewBox","preserveAspectRatio","touchAction","onPointerDown","e","currentTarget","target","_svgRef$current","_svgRef$current$setPo","current","setPointerCapture","call","pointerId","onPointerMove","h","xView","yView","getWorldPointFromClient","onPointerUp","_svgRef$current2","_svgRef$current2$rele","releasePointerCapture","_unused","onPointerLeave","rx","Array","from","_","map","idx","E","X","Y","signPos","_svgRef$current3","_svgRef$current3$setP","stopPropagation","textAnchor","toFixed","L_E","F","dirF","_svgRef$current4","_svgRef$current4$setP","marginTop","flexWrap","type","step","value","onChange","parseInt","marginLeft","parseFloat","gridTemplateColumns","ns","_objectSpread","nt","toExponential"],"sourceRoot":""}