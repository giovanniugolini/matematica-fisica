{"version":3,"file":"static/js/866.107cf048.chunk.js","mappings":"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","sources":["demos/angolo-rotazione/AngleRotationDemo.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from \"react\";\n\n// Conversioni e formattazione radianti\nconst DEG2RAD = Math.PI / 180;\n\n// Prova a scrivere i radianti come multipli \"puliti\" di π (es. π/6, 3π/4)\nfunction formatRadPi(rad: number): string {\n    const k = rad / Math.PI; // multiplo di π\n    const dens = [1, 2, 3, 4, 6, 8, 12, 16]; // denominatori comuni\n    for (const d of dens) {\n        const n = Math.round(k * d);\n        if (Math.abs(k - n / d) < 1e-3) {\n            if (n === 0) return \"0\";\n            if (d === 1) return `${n}π`;\n            return `${n}π/${d}`;\n        }\n    }\n    return rad.toFixed(3);\n}\n\n// clamp helper\nfunction clamp(v: number, a: number, b: number) {\n    return Math.max(a, Math.min(b, v));\n}\n\n// Demo interattiva: angolo come rotazione (CCW positivo)\nexport default function AngleRotationDemo() {\n    const [angleDeg, setAngleDeg] = useState(35);\n    const [isAnimating, setIsAnimating] = useState(false);\n    const [speed, setSpeed] = useState(30); // deg/s\n    const [direction, setDirection] = useState(1); // 1 = CCW, -1 = CW\n    const [showProjections, setShowProjections] = useState(true);\n\n    // nuovi toggle\n    const [highlightArc, setHighlightArc] = useState(false);\n    const [highlightRadius, setHighlightRadius] = useState(false);\n\n    const svgRef = useRef<SVGSVGElement | null>(null);\n\n    const size = 420;\n    const cx = size / 2;\n    const cy = size / 2;\n    const R = 160;\n\n    // Convenzione matematica: CCW positivo\n    const angleRad = useMemo(() => angleDeg * DEG2RAD, [angleDeg]);\n\n    // Animazione continua (mod 360; non arriva esattamente a 360)\n    useEffect(() => {\n        if (!isAnimating) return;\n        let raf: number;\n        let last = performance.now();\n        const tick = (t: number) => {\n            const dt = (t - last) / 1000;\n            last = t;\n            setAngleDeg((a) => {\n                let next = a + direction * speed * dt;\n                // modulo 360 mantenendo 0..360 (se supera 360 ricomincia da 0)\n                next %= 360;\n                if (next < 0) next += 360;\n                return next;\n            });\n            raf = requestAnimationFrame(tick);\n        };\n        raf = requestAnimationFrame(tick);\n        return () => cancelAnimationFrame(raf);\n    }, [isAnimating, speed, direction]);\n\n    // Drag: estrai angolo con CCW positivo (y invertita) e normalizza 0..360)\n    function onPointerDown(e: React.PointerEvent<SVGSVGElement>) {\n        const svg = svgRef.current;\n        if (!svg) return;\n\n        const el = e.currentTarget; // <svg> stabile nella closure\n        el.setPointerCapture?.(e.pointerId);\n\n        const handleMove = (ev: PointerEvent) => {\n            const pt = svg.createSVGPoint();\n            pt.x = ev.clientX;\n            pt.y = ev.clientY;\n            const ctm = svg.getScreenCTM();\n            if (!ctm) return;\n            const p = pt.matrixTransform(ctm.inverse());\n\n            const dx = p.x - cx;\n            const dy = p.y - cy;\n            const ang = Math.atan2(-dy, dx); // CCW positivo\n            let deg = (ang * 180) / Math.PI; // (-180,180]\n            if (deg < 0) deg += 360;         // -> [0,360)\n            setAngleDeg(deg);\n        };\n\n        const handleUp = () => {\n            try {\n                el.releasePointerCapture?.(e.pointerId);\n            } catch {}\n            window.removeEventListener(\"pointermove\", handleMove);\n            window.removeEventListener(\"pointerup\", handleUp);\n        };\n\n        window.addEventListener(\"pointermove\", handleMove, { passive: false });\n        window.addEventListener(\"pointerup\", handleUp, { passive: true });\n    }\n\n    // Converte un angolo (in CONVENZIONE MATEMATICA) in coordinate SVG\n    function polarToXY(r: number, angRad: number) {\n        // y con segno opposto perché in SVG l'asse cresce verso il basso\n        return { x: cx + r * Math.cos(angRad), y: cy - r * Math.sin(angRad) };\n    }\n\n    const P = polarToXY(R, angleRad);\n    const Px = { x: P.x, y: cy };\n    const Py = { x: cx, y: P.y };\n\n    // Soglia per considerare l'angolo come \"giro completo\"\n    const EPS_FULL = 0.5; // gradi\n\n    // Arco \"piccolo\" vicino al centro, r = 60\n    function ArcSmall() {\n        const a = angleDeg;\n        if (a <= 1e-6) return null;\n        if (a >= 360 - EPS_FULL) {\n            // giro completo\n            return <circle cx={cx} cy={cy} r={60} fill=\"none\" stroke=\"#3b82f6\" strokeWidth={5} />;\n        }\n        const largeArc = a > 180 ? 1 : 0;\n        const sweep = 0; // CCW visivo\n        const start = polarToXY(60, 0);\n        const end = polarToXY(60, angleRad);\n        const d = `M ${start.x} ${start.y} A 60 60 0 ${largeArc} ${sweep} ${end.x} ${end.y}`;\n        return <path d={d} fill=\"none\" stroke=\"#3b82f6\" strokeWidth={5} />;\n    }\n\n    // Arco \"grande\" sulla circonferenza principale, r = R\n    function ArcOnCircle() {\n        if (!highlightArc || angleDeg <= 1e-6) return null;\n        if (angleDeg >= 360 - EPS_FULL) {\n            // giro completo\n            return <circle cx={cx} cy={cy} r={R} fill=\"none\" stroke=\"#ef4444\" strokeWidth={6} />;\n        }\n        const a = angleDeg;\n        const largeArc = a > 180 ? 1 : 0;\n        const sweep = 0; // CCW visivo\n        const start = polarToXY(R, 0);\n        const end = polarToXY(R, angleRad);\n        const d = `M ${start.x} ${start.y} A ${R} ${R} 0 ${largeArc} ${sweep} ${end.x} ${end.y}`;\n        return (\n            <path\n                d={d}\n                fill=\"none\"\n                stroke=\"#ef4444\"\n                strokeWidth={6}\n                strokeLinecap=\"round\"\n            />\n        );\n    }\n\n    return (\n        <div style={{ maxWidth: \"900px\", margin: \"auto\", padding: \"1rem\" }}>\n            <h1 style={{ fontSize: \"1.5rem\", fontWeight: \"bold\", marginBottom: \"0.5rem\" }}>\n                Angolo come rotazione\n            </h1>\n            <p style={{ fontSize: \"0.9rem\", color: \"#4b5563\", marginBottom: \"1rem\" }}>\n                Trascina il punto blu sulla circonferenza, usa lo slider o avvia l'animazione.\n                Convenzione: <b>antiorario = angoli positivi</b>. Intervallo di lavoro: 0°–360°.\n            </p>\n\n            <div style={{ display: \"grid\", gap: \"1.5rem\", gridTemplateColumns: \"1fr 1fr\" }}>\n                <div style={{ background: \"white\", borderRadius: 16, padding: 8, boxShadow: \"0 1px 4px rgba(0,0,0,0.1)\" }}>\n                    <svg\n                        ref={svgRef}\n                        viewBox={`0 0 ${size} ${size}`}\n                        style={{ width: \"100%\", height: \"auto\", cursor: \"crosshair\", touchAction: \"none\" }}\n                        onPointerDown={onPointerDown}\n                    >\n                        <rect x={0} y={0} width={size} height={size} fill=\"white\" />\n                        {/* circonferenza */}\n                        <circle cx={cx} cy={cy} r={R} fill=\"none\" stroke=\"#e5e7eb\" strokeWidth={2} />\n\n                        {/* arco evidenziato sulla circonferenza principale (toggle) */}\n                        <ArcOnCircle />\n\n                        {/* assi */}\n                        <line x1={cx - R - 12} y1={cy} x2={cx + R + 12} y2={cy} stroke=\"#d1d5db\" strokeDasharray=\"6 6\" />\n                        <line x1={cx} y1={cy - R - 12} x2={cx} y2={cy + R + 12} stroke=\"#d1d5db\" strokeDasharray=\"6 6\" />\n\n                        {/* lato iniziale (asse x positivo) */}\n                        <line x1={cx} y1={cy} x2={cx + R} y2={cy} stroke=\"#9ca3af\" strokeWidth={3} />\n\n                        {/* arco angolo \"piccolo\" vicino al centro (sempre visibile) */}\n                        <ArcSmall />\n\n                        {/* lato finale (raggio) */}\n                        <line\n                            x1={cx}\n                            y1={cy}\n                            x2={P.x}\n                            y2={P.y}\n                            stroke={highlightRadius ? \"#f59e0b\" : \"#111827\"}\n                            strokeWidth={highlightRadius ? 6 : 4}\n                        />\n\n                        {/* proiezioni */}\n                        {showProjections && (\n                            <g>\n                                <line x1={P.x} y1={P.y} x2={Px.x} y2={Px.y} stroke=\"#a8a29e\" strokeDasharray=\"4 4\" />\n                                <line x1={P.x} y1={P.y} x2={Py.x} y2={Py.y} stroke=\"#a8a29e\" strokeDasharray=\"4 4\" />\n                                <circle cx={Px.x} cy={Px.y} r={4} fill=\"#a8a29e\" />\n                                <circle cx={Py.x} cy={Py.y} r={4} fill=\"#a8a29e\" />\n                            </g>\n                        )}\n\n                        <circle cx={cx} cy={cy} r={5} fill=\"#111827\" />\n                        <circle cx={P.x} cy={P.y} r={9} fill=\"#3b82f6\" />\n                        <text x={cx + R + 10} y={cy - 8} fontSize={12} fill=\"#6b7280\">\n                            lato iniziale\n                        </text>\n                    </svg>\n                </div>\n\n                <div style={{ background: \"white\", borderRadius: 16, padding: 16, boxShadow: \"0 1px 4px rgba(0,0,0,0.1)\" }}>\n                    <div>\n                        <label>Angolo (°)</label>\n                        <input\n                            type=\"range\"\n                            min={0}\n                            max={360}\n                            step={1}\n                            value={angleDeg}\n                            onChange={(e) => setAngleDeg(clamp(parseFloat(e.target.value), 0, 360))}\n                            style={{ width: \"100%\" }}\n                        />\n                        <div style={{ fontSize: \"2rem\", fontWeight: \"bold\" }}>\n                            {angleDeg.toFixed(1)}°\n                            <span style={{ marginLeft: 12, fontSize: 16, color: \"#6b7280\" }}>\n                ({(angleDeg * DEG2RAD).toFixed(3)} rad = {formatRadPi(angleDeg * DEG2RAD)})\n              </span>\n                        </div>\n                    </div>\n\n                    <div style={{ marginTop: 16, display: \"flex\", gap: 8, flexWrap: \"wrap\" }}>\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: \"black\", color: \"white\", border: 0 }}\n                            onClick={() => setIsAnimating((v) => !v)}\n                        >\n                            {isAnimating ? \"Pausa\" : \"Avvia animazione\"}\n                        </button>\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: \"#f3f4f6\", border: 0 }}\n                            onClick={() => setAngleDeg(0)}\n                        >\n                            Reset\n                        </button>\n\n                        {/* nuovi pulsanti */}\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: highlightArc ? \"#fecaca\" : \"#f3f4f6\", border: 0 }}\n                            onClick={() => setHighlightArc((s) => !s)}\n                        >\n                            {highlightArc ? \"Nascondi arco\" : \"Evidenzia arco sulla circonferenza\"}\n                        </button>\n                        <button\n                            style={{ padding: \"8px 16px\", borderRadius: 16, background: highlightRadius ? \"#fde68a\" : \"#f3f4f6\", border: 0 }}\n                            onClick={() => setHighlightRadius((s) => !s)}\n                        >\n                            {highlightRadius ? \"Raggio normale\" : \"Evidenzia raggio\"}\n                        </button>\n\n                        <div style={{ display: \"flex\", alignItems: \"center\", gap: 6 }}>\n                            <label style={{ display: \"flex\", alignItems: \"center\", gap: 6 }}>\n                                Velocità (°/s)\n                                <input\n                                    type=\"number\"\n                                    value={speed}\n                                    onChange={(e) => setSpeed(parseFloat(e.target.value || \"0\"))}\n                                    style={{ width: 80 }}\n                                />\n                            </label>\n                            <label style={{ display: \"flex\", alignItems: \"center\", gap: 6 }}>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={direction === -1}\n                                    onChange={(e) => setDirection(e.target.checked ? -1 : 1)}\n                                />\n                                Senso orario\n                            </label>\n                        </div>\n                    </div>\n\n                    <div style={{ marginTop: 16 }}>\n                        <label style={{ display: \"block\" }}>\n                            <input\n                                type=\"checkbox\"\n                                checked={showProjections}\n                                onChange={(e) => setShowProjections(e.target.checked)}\n                            />\n                            Mostra proiezioni (cosθ, sinθ)\n                        </label>\n                    </div>\n\n                    <p style={{ fontSize: \"0.9rem\", marginTop: 16 }}>\n                        L'angolo è la rotazione dal lato iniziale (asse x positivo) al lato finale. Con proiezioni attive,\n                        la coordinata x = cos θ e la y = sin θ. Convenzione: antiorario = positivo.\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":["DEG2RAD","Math","PI","formatRadPi","rad","k","dens","d","n","round","abs","concat","toFixed","AngleRotationDemo","angleDeg","setAngleDeg","useState","isAnimating","setIsAnimating","speed","setSpeed","direction","setDirection","showProjections","setShowProjections","highlightArc","setHighlightArc","highlightRadius","setHighlightRadius","svgRef","useRef","size","cx","cy","R","angleRad","useMemo","polarToXY","r","angRad","x","cos","y","sin","useEffect","raf","last","performance","now","tick","t","dt","a","next","requestAnimationFrame","cancelAnimationFrame","P","Px","Py","ArcSmall","_jsx","fill","stroke","strokeWidth","largeArc","start","end","ArcOnCircle","strokeLinecap","_jsxs","style","maxWidth","margin","padding","children","fontSize","fontWeight","marginBottom","color","display","gap","gridTemplateColumns","background","borderRadius","boxShadow","ref","viewBox","width","height","cursor","touchAction","onPointerDown","e","_el$setPointerCapture","svg","current","el","currentTarget","setPointerCapture","call","pointerId","handleMove","ev","pt","createSVGPoint","clientX","clientY","ctm","getScreenCTM","p","matrixTransform","inverse","dx","dy","deg","atan2","handleUp","_el$releasePointerCap","releasePointerCapture","_unused","window","removeEventListener","addEventListener","passive","x1","y1","x2","y2","strokeDasharray","type","min","max","step","value","onChange","v","parseFloat","target","b","marginLeft","marginTop","flexWrap","border","onClick","s","alignItems","checked"],"sourceRoot":""}